require("dotenv").config();
const mongoose = require("mongoose");
const Notification = require("./src/models/Notification");
const User = require("./src/models/User");

const addTestNotifications = async () => {
    try {
        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI);
        console.log("Connected to MongoDB");

        // L·∫•y danh s√°ch users hi·ªán c√≥
        const users = await User.find().limit(3); // L·∫•y 3 user ƒë·∫ßu ti√™n
        console.log(`Found ${users.length} users`);

        if (users.length === 0) {
            console.log("No users found. Please create users first.");
            return;
        }

        // Ki·ªÉm tra xem ƒë√£ c√≥ notifications ch∆∞a
        const existingNotifications = await Notification.countDocuments();
        if (existingNotifications > 0) {
            console.log(
                `Found ${existingNotifications} existing notifications. Skipping...`
            );
            return;
        }

        // T·∫°o notifications test
        const notifications = [
            {
                user: users[0]._id,
                type: "task_assigned",
                message: "B·∫°n ƒë√£ ƒë∆∞·ª£c giao task m·ªõi: Thi·∫øt k·∫ø giao di·ªán",
                relatedTo: null,
                onModel: "Task",
                read: false,
            },
            {
                user: users[1] ? users[1]._id : users[0]._id,
                type: "new_comment",
                message: "C√≥ comment m·ªõi trong task: Ph√°t tri·ªÉn backend",
                relatedTo: null,
                onModel: "Comment",
                read: false,
            },
            {
                user: users[2] ? users[2]._id : users[0]._id,
                type: "task_due",
                message: "Task c·ªßa b·∫°n s·∫Øp ƒë·∫øn h·∫°n: Ki·ªÉm th·ª≠ API",
                relatedTo: null,
                onModel: "Task",
                read: false,
            },
            {
                user: users[0]._id,
                type: "added_to_project",
                message: "B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m v√†o d·ª± √°n: Website Redesign",
                relatedTo: null,
                onModel: "Project",
                read: true,
            },
            {
                user: users[1] ? users[1]._id : users[0]._id,
                type: "task_status_update",
                message: "Task ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh completed",
                relatedTo: null,
                onModel: "Task",
                read: false,
            },
            {
                user: users[2] ? users[2]._id : users[0]._id,
                type: "new_document",
                message: "T√†i li·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o d·ª± √°n",
                relatedTo: null,
                onModel: "Document",
                read: false,
            },
            {
                user: users[0]._id,
                type: "approval_request",
                message: "B·∫°n c√≥ y√™u c·∫ßu ph√™ duy·ªát m·ªõi c·∫ßn x·ª≠ l√Ω",
                relatedTo: null,
                onModel: "Project",
                read: false,
            },
            {
                user: users[1] ? users[1]._id : users[0]._id,
                type: "mention",
                message: "B·∫°n ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn trong m·ªôt comment",
                relatedTo: null,
                onModel: "Comment",
                read: true,
            },
        ];

        const createdNotifications = await Notification.insertMany(
            notifications
        );
        console.log(
            `‚úÖ Added ${createdNotifications.length} test notifications`
        );

        // Hi·ªÉn th·ªã th√¥ng tin notifications ƒë√£ t·∫°o
        console.log("\nüìã Created notifications:");
        createdNotifications.forEach((notification, index) => {
            console.log(
                `${index + 1}. ${notification.type}: ${
                    notification.message
                } (User: ${notification.user})`
            );
        });

        await mongoose.connection.close();
        console.log("\nüéâ Test notifications added successfully!");
        process.exit(0);
    } catch (error) {
        console.error("‚ùå Error adding notifications:", error);
        if (mongoose.connection.readyState === 1) {
            await mongoose.connection.close();
        }
        process.exit(1);
    }
};

// Ch·∫°y script
addTestNotifications();

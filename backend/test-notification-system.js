require("dotenv").config();
const mongoose = require("mongoose");

// Import models to register schemas
require("./src/models/User");
require("./src/models/Project");
require("./src/models/Task");
require("./src/models/Notification");

const User = require("./src/models/User");
const Project = require("./src/models/Project");
const Task = require("./src/models/Task");
const Notification = require("./src/models/Notification");

const testNotificationSystem = async () => {
    try {
        // Connect to MongoDB
        await mongoose.connect(process.env.MONGODB_URI);
        console.log("Connected to MongoDB");

        console.log("\nüîî Testing complete notification system...");

        // L·∫•y user ƒë·∫ßu ti√™n ƒë·ªÉ test
        const user = await User.findOne();
        if (!user) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y user n√†o ƒë·ªÉ test");
            return;
        }

        console.log(`üë§ Testing with user: ${user.name} (${user.email})`);

        // L·∫•y project ƒë·∫ßu ti√™n
        const project = await Project.findOne();
        if (!project) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y project n√†o ƒë·ªÉ test");
            return;
        }

        console.log(`üìã Testing with project: ${project.name}`);

        // X√≥a th√¥ng b√°o c≈© c·ªßa user n√†y
        await Notification.deleteMany({ user: user._id });
        console.log("üßπ Cleaned up old notifications");

        // T·∫°o c√°c th√¥ng b√°o test ƒëa d·∫°ng
        const testNotifications = [
            {
                user: user._id,
                type: "task_assigned",
                message: "B·∫°n ƒë∆∞·ª£c giao task m·ªõi: Test Task Assignment",
                onModel: "Task",
                relatedTo: project._id,
                read: false,
            },
            {
                user: user._id,
                type: "new_comment",
                message: "C√≥ comment m·ªõi trong project",
                onModel: "Project",
                relatedTo: project._id,
                read: false,
            },
            {
                user: user._id,
                type: "task_due",
                message: "Task s·∫Øp ƒë·∫øn h·∫°n: Test Due Task",
                onModel: "Task",
                relatedTo: project._id,
                read: false,
            },
            {
                user: user._id,
                type: "new_document",
                message: "Document m·ªõi ƒë∆∞·ª£c upload",
                onModel: "Project",
                relatedTo: project._id,
                read: false,
            },
            {
                user: user._id,
                type: "mention",
                message: "B·∫°n ƒë∆∞·ª£c mention trong comment",
                onModel: "Comment",
                relatedTo: project._id,
                read: false,
            },
            {
                user: user._id,
                type: "milestone_created",
                message: "Milestone m·ªõi ƒë∆∞·ª£c t·∫°o",
                onModel: "Project",
                relatedTo: project._id,
                read: true, // M·ªôt th√¥ng b√°o ƒë√£ ƒë·ªçc
            },
        ];

        const createdNotifications = await Notification.insertMany(
            testNotifications
        );
        console.log(
            `‚úÖ Created ${createdNotifications.length} test notifications`
        );

        // Ki·ªÉm tra s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
        const unreadNotifications = await Notification.find({
            user: user._id,
            read: false,
        });

        console.log(
            `üìä Unread notifications count: ${unreadNotifications.length}`
        );

        // Hi·ªÉn th·ªã chi ti·∫øt th√¥ng b√°o
        console.log("\nüìã Notification details:");
        for (const notification of createdNotifications) {
            console.log(
                `- ${notification.type}: ${notification.message} (${
                    notification.read ? "ƒê√£ ƒë·ªçc" : "Ch∆∞a ƒë·ªçc"
                })`
            );
        }

        console.log("\nüéØ Badge should show:", unreadNotifications.length);
        console.log("üí° Features to test:");
        console.log("1. Notification bell badge shows correct count");
        console.log("2. Popup notifications appear for new notifications");
        console.log("3. Clicking notifications navigates to correct pages");
        console.log("4. Mark as read functionality works");
        console.log("5. Notification page shows all notifications");

        await mongoose.connection.close();
        process.exit(0);
    } catch (error) {
        console.error("‚ùå Error testing notification system:", error);
        if (mongoose.connection.readyState === 1) {
            await mongoose.connection.close();
        }
        process.exit(1);
    }
};

testNotificationSystem();
